/* tslint:disable */
/* eslint-disable */
/**
 * Open Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseItem
 */
export interface BaseItem {
    /**
     * Read-only.
     * @type {string}
     * @memberof BaseItem
     */
    'id'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof BaseItem
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof BaseItem
     */
    'createdDateTime'?: string;
    /**
     * Provides a user-visible description of the item. Optional.
     * @type {string}
     * @memberof BaseItem
     */
    'description'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof BaseItem
     */
    'eTag'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof BaseItem
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof BaseItem
     */
    'lastModifiedDateTime'?: string;
    /**
     * The name of the item. Read-write.
     * @type {string}
     * @memberof BaseItem
     */
    'name'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof BaseItem
     */
    'parentReference'?: ItemReference;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof BaseItem
     */
    'webUrl'?: string;
    /**
     * 
     * @type {User}
     * @memberof BaseItem
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {User}
     * @memberof BaseItem
     */
    'lastModifiedByUser'?: User;
}
/**
 * 
 * @export
 * @interface BaseItemInline
 */
export interface BaseItemInline {
    /**
     * 
     * @type {IdentitySet}
     * @memberof BaseItemInline
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof BaseItemInline
     */
    'createdDateTime'?: string;
    /**
     * Provides a user-visible description of the item. Optional.
     * @type {string}
     * @memberof BaseItemInline
     */
    'description'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof BaseItemInline
     */
    'eTag'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof BaseItemInline
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof BaseItemInline
     */
    'lastModifiedDateTime'?: string;
    /**
     * The name of the item. Read-write.
     * @type {string}
     * @memberof BaseItemInline
     */
    'name'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof BaseItemInline
     */
    'parentReference'?: ItemReference;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof BaseItemInline
     */
    'webUrl'?: string;
    /**
     * 
     * @type {User}
     * @memberof BaseItemInline
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {User}
     * @memberof BaseItemInline
     */
    'lastModifiedByUser'?: User;
}
/**
 * 
 * @export
 * @interface CollectionOfDriveItems
 */
export interface CollectionOfDriveItems {
    /**
     * 
     * @type {Array<DriveItem>}
     * @memberof CollectionOfDriveItems
     */
    'value'?: Array<DriveItem>;
    /**
     * 
     * @type {string}
     * @memberof CollectionOfDriveItems
     */
    '@odata.nextLink'?: string;
}
/**
 * 
 * @export
 * @interface CollectionOfDrives
 */
export interface CollectionOfDrives {
    /**
     * 
     * @type {Array<Drive>}
     * @memberof CollectionOfDrives
     */
    'value'?: Array<Drive>;
    /**
     * 
     * @type {string}
     * @memberof CollectionOfDrives
     */
    '@odata.nextLink'?: string;
}
/**
 * Information about the deleted state of the item. Read-only.
 * @export
 * @interface Deleted
 */
export interface Deleted {
    /**
     * Represents the state of the deleted item.
     * @type {string}
     * @memberof Deleted
     */
    'state'?: string;
}
/**
 * Represents an Active Directory object. The directoryObject type is the base type for many other directory entity types.
 * @export
 * @interface DirectoryObject
 */
export interface DirectoryObject {
    /**
     * Read-only.
     * @type {string}
     * @memberof DirectoryObject
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DirectoryObject
     */
    'deletedDateTime'?: string;
}
/**
 * 
 * @export
 * @interface DirectoryObjectInline
 */
export interface DirectoryObjectInline {
    /**
     * 
     * @type {string}
     * @memberof DirectoryObjectInline
     */
    'deletedDateTime'?: string;
}
/**
 * Storage Space. Read-only.
 * @export
 * @interface Drive
 */
export interface Drive {
    /**
     * Read-only.
     * @type {string}
     * @memberof Drive
     */
    'id'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Drive
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'createdDateTime'?: string;
    /**
     * Provides a user-visible description of the item. Optional.
     * @type {string}
     * @memberof Drive
     */
    'description'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'eTag'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Drive
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'lastModifiedDateTime'?: string;
    /**
     * The name of the item. Read-write.
     * @type {string}
     * @memberof Drive
     */
    'name'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof Drive
     */
    'parentReference'?: ItemReference;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof Drive
     */
    'webUrl'?: string;
    /**
     * 
     * @type {User}
     * @memberof Drive
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {User}
     * @memberof Drive
     */
    'lastModifiedByUser'?: User;
    /**
     * Describes the type of drive represented by this resource. Values are \"personal\" for users home spaces, \"project\" or \"share\". Read-only.
     * @type {string}
     * @memberof Drive
     */
    'driveType'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof Drive
     */
    'owner'?: IdentitySet;
    /**
     * 
     * @type {Quota}
     * @memberof Drive
     */
    'quota'?: Quota;
    /**
     * All items contained in the drive. Read-only. Nullable.
     * @type {Array<DriveItem>}
     * @memberof Drive
     */
    'items'?: Array<DriveItem>;
    /**
     * 
     * @type {DriveItem}
     * @memberof Drive
     */
    'root'?: DriveItem;
}
/**
 * 
 * @export
 * @interface DriveInline
 */
export interface DriveInline {
    /**
     * Describes the type of drive represented by this resource. Values are \"personal\" for users home spaces, \"project\" or \"share\". Read-only.
     * @type {string}
     * @memberof DriveInline
     */
    'driveType'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof DriveInline
     */
    'owner'?: IdentitySet;
    /**
     * 
     * @type {Quota}
     * @memberof DriveInline
     */
    'quota'?: Quota;
    /**
     * All items contained in the drive. Read-only. Nullable.
     * @type {Array<DriveItem>}
     * @memberof DriveInline
     */
    'items'?: Array<DriveItem>;
    /**
     * 
     * @type {DriveItem}
     * @memberof DriveInline
     */
    'root'?: DriveItem;
}
/**
 * Reprensents a resource inside a drive. Read-only.
 * @export
 * @interface DriveItem
 */
export interface DriveItem {
    /**
     * Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'id'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof DriveItem
     */
    'createdBy'?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'createdDateTime'?: string;
    /**
     * Provides a user-visible description of the item. Optional.
     * @type {string}
     * @memberof DriveItem
     */
    'description'?: string;
    /**
     * ETag for the item. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'eTag'?: string;
    /**
     * 
     * @type {IdentitySet}
     * @memberof DriveItem
     */
    'lastModifiedBy'?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'lastModifiedDateTime'?: string;
    /**
     * The name of the item. Read-write.
     * @type {string}
     * @memberof DriveItem
     */
    'name'?: string;
    /**
     * 
     * @type {ItemReference}
     * @memberof DriveItem
     */
    'parentReference'?: ItemReference;
    /**
     * URL that displays the resource in the browser. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'webUrl'?: string;
    /**
     * 
     * @type {User}
     * @memberof DriveItem
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {User}
     * @memberof DriveItem
     */
    'lastModifiedByUser'?: User;
    /**
     * The content stream, if the item represents a file.
     * @type {string}
     * @memberof DriveItem
     */
    'content'?: string;
    /**
     * An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'cTag'?: string;
    /**
     * 
     * @type {Deleted}
     * @memberof DriveItem
     */
    'deleted'?: Deleted;
    /**
     * 
     * @type {OpenGraphFile}
     * @memberof DriveItem
     */
    'file'?: OpenGraphFile;
    /**
     * 
     * @type {FileSystemInfo}
     * @memberof DriveItem
     */
    'fileSystemInfo'?: FileSystemInfo;
    /**
     * 
     * @type {Folder}
     * @memberof DriveItem
     */
    'folder'?: Folder;
    /**
     * 
     * @type {Image}
     * @memberof DriveItem
     */
    'image'?: Image;
    /**
     * If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
     * @type {object}
     * @memberof DriveItem
     */
    'root'?: object;
    /**
     * Size of the item in bytes. Read-only.
     * @type {number}
     * @memberof DriveItem
     */
    'size'?: number;
    /**
     * WebDAV compatible URL for the item. Read-only.
     * @type {string}
     * @memberof DriveItem
     */
    'webDavUrl'?: string;
    /**
     * Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
     * @type {Array<DriveItem>}
     * @memberof DriveItem
     */
    'children'?: Array<DriveItem>;
}
/**
 * 
 * @export
 * @interface DriveItemInline
 */
export interface DriveItemInline {
    /**
     * The content stream, if the item represents a file.
     * @type {string}
     * @memberof DriveItemInline
     */
    'content'?: string;
    /**
     * An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
     * @type {string}
     * @memberof DriveItemInline
     */
    'cTag'?: string;
    /**
     * 
     * @type {Deleted}
     * @memberof DriveItemInline
     */
    'deleted'?: Deleted;
    /**
     * 
     * @type {OpenGraphFile}
     * @memberof DriveItemInline
     */
    'file'?: OpenGraphFile;
    /**
     * 
     * @type {FileSystemInfo}
     * @memberof DriveItemInline
     */
    'fileSystemInfo'?: FileSystemInfo;
    /**
     * 
     * @type {Folder}
     * @memberof DriveItemInline
     */
    'folder'?: Folder;
    /**
     * 
     * @type {Image}
     * @memberof DriveItemInline
     */
    'image'?: Image;
    /**
     * If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
     * @type {object}
     * @memberof DriveItemInline
     */
    'root'?: object;
    /**
     * Size of the item in bytes. Read-only.
     * @type {number}
     * @memberof DriveItemInline
     */
    'size'?: number;
    /**
     * WebDAV compatible URL for the item. Read-only.
     * @type {string}
     * @memberof DriveItemInline
     */
    'webDavUrl'?: string;
    /**
     * Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
     * @type {Array<DriveItem>}
     * @memberof DriveItemInline
     */
    'children'?: Array<DriveItem>;
}
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * Read-only.
     * @type {string}
     * @memberof Entity
     */
    'id'?: string;
}
/**
 * File system information on client. Read-write.
 * @export
 * @interface FileSystemInfo
 */
export interface FileSystemInfo {
    /**
     * The UTC date and time the file was created on a client.
     * @type {string}
     * @memberof FileSystemInfo
     */
    'createdDateTime'?: string;
    /**
     * The UTC date and time the file was last accessed. Available for the recent file list only.
     * @type {string}
     * @memberof FileSystemInfo
     */
    'lastAccessedDateTime'?: string;
    /**
     * The UTC date and time the file was last modified on a client.
     * @type {string}
     * @memberof FileSystemInfo
     */
    'lastModifiedDateTime'?: string;
}
/**
 * Folder metadata, if the item is a folder. Read-only.
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * Number of children contained immediately within this container.
     * @type {number}
     * @memberof Folder
     */
    'childCount'?: number;
    /**
     * 
     * @type {FolderView}
     * @memberof Folder
     */
    'view'?: FolderView;
}
/**
 * A collection of properties defining the recommended view for the folder.
 * @export
 * @interface FolderView
 */
export interface FolderView {
    /**
     * The method by which the folder should be sorted.
     * @type {string}
     * @memberof FolderView
     */
    'sortBy'?: string;
    /**
     * If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
     * @type {string}
     * @memberof FolderView
     */
    'sortOrder'?: string;
    /**
     * The type of view that should be used to represent the folder.
     * @type {string}
     * @memberof FolderView
     */
    'viewType'?: string;
}
/**
 * Hashes of the file\'s binary content, if available. Read-only.
 * @export
 * @interface Hashes
 */
export interface Hashes {
    /**
     * The CRC32 value of the file (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'crc32Hash'?: string;
    /**
     * A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'quickXorHash'?: string;
    /**
     * SHA1 hash for the contents of the file (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'sha1Hash'?: string;
    /**
     * SHA256 hash for the contents of the file (if available). Read-only.
     * @type {string}
     * @memberof Hashes
     */
    'sha256Hash'?: string;
}
/**
 * 
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * The identity\'s display name. Note that this may not always be available or up to date. For example, if a user changes their display name, the API may show the new value in a future response, but the items associated with the user won\'t show up as having changed when using delta.
     * @type {string}
     * @memberof Identity
     */
    'displayName'?: string;
    /**
     * Unique identifier for the identity.
     * @type {string}
     * @memberof Identity
     */
    'id'?: string;
}
/**
 * Optional. User account.
 * @export
 * @interface IdentitySet
 */
export interface IdentitySet {
    /**
     * 
     * @type {Identity}
     * @memberof IdentitySet
     */
    'application'?: Identity;
    /**
     * 
     * @type {Identity}
     * @memberof IdentitySet
     */
    'device'?: Identity;
    /**
     * 
     * @type {Identity}
     * @memberof IdentitySet
     */
    'user'?: Identity;
}
/**
 * Image metadata, if the item is an image. Read-only.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * Optional. Height of the image, in pixels. Read-only.
     * @type {number}
     * @memberof Image
     */
    'height'?: number;
    /**
     * Optional. Width of the image, in pixels. Read-only.
     * @type {number}
     * @memberof Image
     */
    'width'?: number;
}
/**
 * 
 * @export
 * @interface ItemReference
 */
export interface ItemReference {
    /**
     * Unique identifier of the drive instance that contains the item. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'driveId'?: string;
    /**
     * Identifies the type of drive. See [drive][] resource for values. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'driveType'?: string;
    /**
     * Unique identifier of the item in the drive. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'id'?: string;
    /**
     * The name of the item being referenced. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'name'?: string;
    /**
     * Path that can be used to navigate to the item. Read-only.
     * @type {string}
     * @memberof ItemReference
     */
    'path'?: string;
    /**
     * A unique identifier for a shared resource that can be accessed via the [Shares][] API.
     * @type {string}
     * @memberof ItemReference
     */
    'shareId'?: string;
}
/**
 * 
 * @export
 * @interface OdataError
 */
export interface OdataError {
    /**
     * 
     * @type {OdataErrorMain}
     * @memberof OdataError
     */
    'error': OdataErrorMain;
}
/**
 * 
 * @export
 * @interface OdataErrorDetail
 */
export interface OdataErrorDetail {
    /**
     * 
     * @type {string}
     * @memberof OdataErrorDetail
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorDetail
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorDetail
     */
    'target'?: string;
}
/**
 * 
 * @export
 * @interface OdataErrorMain
 */
export interface OdataErrorMain {
    /**
     * 
     * @type {string}
     * @memberof OdataErrorMain
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorMain
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof OdataErrorMain
     */
    'target'?: string;
    /**
     * 
     * @type {Array<OdataErrorDetail>}
     * @memberof OdataErrorMain
     */
    'details'?: Array<OdataErrorDetail>;
    /**
     * The structure of this object is service-specific
     * @type {object}
     * @memberof OdataErrorMain
     */
    'innererror'?: object;
}
/**
 * File metadata, if the item is a file. Read-only.
 * @export
 * @interface OpenGraphFile
 */
export interface OpenGraphFile {
    /**
     * 
     * @type {Hashes}
     * @memberof OpenGraphFile
     */
    'hashes'?: Hashes;
    /**
     * The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
     * @type {string}
     * @memberof OpenGraphFile
     */
    'mimeType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OpenGraphFile
     */
    'processingMetadata'?: boolean;
}
/**
 * Optional. Information about the drive\'s storage space quota. Read-only.
 * @export
 * @interface Quota
 */
export interface Quota {
    /**
     * Total space consumed by files in the recycle bin, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'deleted'?: number;
    /**
     * Total space remaining before reaching the quota limit, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'remaining'?: number;
    /**
     * Enumeration value that indicates the state of the storage space. Read-only.
     * @type {string}
     * @memberof Quota
     */
    'state'?: string;
    /**
     * Total allowed storage space, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'total'?: number;
    /**
     * Total space used, in bytes. Read-only.
     * @type {number}
     * @memberof Quota
     */
    'used'?: number;
}
/**
 * Represents an Active Directory user object.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Read-only.
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedDateTime'?: string;
    /**
     * true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter.
     * @type {boolean}
     * @memberof User
     */
    'accountEnabled'?: boolean;
    /**
     * The telephone numbers for the user. Only one number can be set for this property. Returned by default. Read-only for users synced from on-premises directory.
     * @type {Array<string>}
     * @memberof User
     */
    'businessPhones'?: Array<string>;
    /**
     * The city in which the user is located. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'city'?: string;
    /**
     * The company name which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length of the company name is 64 characters.Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'companyName'?: string;
    /**
     * The country/region in which the user is located; for example, \'US\' or \'UK\'. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'country'?: string;
    /**
     * The date and time the user was created. The value cannot be modified and is automatically populated when the entity is created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. Property is nullable. A null value indicates that an accurate creation time couldn\'t be determined for the user. Returned only on $select. Read-only. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'createdDateTime'?: string;
    /**
     * The name for the department in which the user works. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'department'?: string;
    /**
     * The name displayed in the address book for the user. This value is usually the combination of the user\'s first name, middle initial, and last name. This property is required when a user is created and it cannot be cleared during updates. Returned by default. Supports $filter and $orderby.
     * @type {string}
     * @memberof User
     */
    'displayName'?: string;
    /**
     * The fax number of the user. Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'faxNumber'?: string;
    /**
     * The given name (first name) of the user. Returned by default. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'givenName'?: string;
    /**
     * The time when this user last changed their password. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select. Read-only.
     * @type {string}
     * @memberof User
     */
    'lastPasswordChangeDateTime'?: string;
    /**
     * Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent, minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the legal age group property definitions for further information. Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'legalAgeGroupClassification'?: string;
    /**
     * The SMTP address for the user, for example, \'jeff@contoso.onowncloud.com\'. Returned by default. Supports $filter and endsWith.
     * @type {string}
     * @memberof User
     */
    'mail'?: string;
    /**
     * The mail alias for the user. This property must be specified when a user is created. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'mailNickname'?: string;
    /**
     * The primary cellular telephone number for the user. Returned by default. Read-only for users synced from on-premises directory.
     * @type {string}
     * @memberof User
     */
    'mobilePhone'?: string;
    /**
     * The office location in the user\'s place of business. Returned by default.
     * @type {string}
     * @memberof User
     */
    'officeLocation'?: string;
    /**
     * The postal code for the user\'s postal address. The postal code is specific to the user\'s country/region. In the United States of America, this attribute contains the ZIP code. Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'postalCode'?: string;
    /**
     * The preferred language for the user. Should follow ISO 639-1 Code; for example \'en-US\'. Returned by default.
     * @type {string}
     * @memberof User
     */
    'preferredLanguage'?: string;
    /**
     * The state or province in the user\'s address. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'state'?: string;
    /**
     * The street address of the user\'s place of business. Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'streetAddress'?: string;
    /**
     * The user\'s surname (family name or last name). Returned by default. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'surname'?: string;
    /**
     * A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'usageLocation'?: string;
    /**
     * The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user\'s email name. The general format is alias@domain, where domain must be present in the tenant\'s collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization. Returned by default. Supports $filter, $orderby, and endsWith.
     * @type {string}
     * @memberof User
     */
    'userPrincipalName'?: string;
    /**
     * A string value that can be used to classify user types in your directory, such as \'Member\' and \'Guest\'. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof User
     */
    'userType'?: string;
    /**
     * A freeform text entry field for the user to describe themselves. Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'aboutMe'?: string;
    /**
     * The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select.
     * @type {string}
     * @memberof User
     */
    'birthday'?: string;
    /**
     * 
     * @type {Drive}
     * @memberof User
     */
    'drive'?: Drive;
    /**
     * A collection of drives available for this user. Read-only.
     * @type {Array<Drive>}
     * @memberof User
     */
    'drives'?: Array<Drive>;
}
/**
 * 
 * @export
 * @interface UserInline
 */
export interface UserInline {
    /**
     * true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter.
     * @type {boolean}
     * @memberof UserInline
     */
    'accountEnabled'?: boolean;
    /**
     * The telephone numbers for the user. Only one number can be set for this property. Returned by default. Read-only for users synced from on-premises directory.
     * @type {Array<string>}
     * @memberof UserInline
     */
    'businessPhones'?: Array<string>;
    /**
     * The city in which the user is located. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'city'?: string;
    /**
     * The company name which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length of the company name is 64 characters.Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'companyName'?: string;
    /**
     * The country/region in which the user is located; for example, \'US\' or \'UK\'. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'country'?: string;
    /**
     * The date and time the user was created. The value cannot be modified and is automatically populated when the entity is created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. Property is nullable. A null value indicates that an accurate creation time couldn\'t be determined for the user. Returned only on $select. Read-only. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'createdDateTime'?: string;
    /**
     * The name for the department in which the user works. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'department'?: string;
    /**
     * The name displayed in the address book for the user. This value is usually the combination of the user\'s first name, middle initial, and last name. This property is required when a user is created and it cannot be cleared during updates. Returned by default. Supports $filter and $orderby.
     * @type {string}
     * @memberof UserInline
     */
    'displayName'?: string;
    /**
     * The fax number of the user. Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'faxNumber'?: string;
    /**
     * The given name (first name) of the user. Returned by default. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'givenName'?: string;
    /**
     * The time when this user last changed their password. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select. Read-only.
     * @type {string}
     * @memberof UserInline
     */
    'lastPasswordChangeDateTime'?: string;
    /**
     * Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent, minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the legal age group property definitions for further information. Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'legalAgeGroupClassification'?: string;
    /**
     * The SMTP address for the user, for example, \'jeff@contoso.onowncloud.com\'. Returned by default. Supports $filter and endsWith.
     * @type {string}
     * @memberof UserInline
     */
    'mail'?: string;
    /**
     * The mail alias for the user. This property must be specified when a user is created. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'mailNickname'?: string;
    /**
     * The primary cellular telephone number for the user. Returned by default. Read-only for users synced from on-premises directory.
     * @type {string}
     * @memberof UserInline
     */
    'mobilePhone'?: string;
    /**
     * The office location in the user\'s place of business. Returned by default.
     * @type {string}
     * @memberof UserInline
     */
    'officeLocation'?: string;
    /**
     * The postal code for the user\'s postal address. The postal code is specific to the user\'s country/region. In the United States of America, this attribute contains the ZIP code. Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'postalCode'?: string;
    /**
     * The preferred language for the user. Should follow ISO 639-1 Code; for example \'en-US\'. Returned by default.
     * @type {string}
     * @memberof UserInline
     */
    'preferredLanguage'?: string;
    /**
     * The state or province in the user\'s address. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'state'?: string;
    /**
     * The street address of the user\'s place of business. Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'streetAddress'?: string;
    /**
     * The user\'s surname (family name or last name). Returned by default. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'surname'?: string;
    /**
     * A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'usageLocation'?: string;
    /**
     * The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user\'s email name. The general format is alias@domain, where domain must be present in the tenant\'s collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization. Returned by default. Supports $filter, $orderby, and endsWith.
     * @type {string}
     * @memberof UserInline
     */
    'userPrincipalName'?: string;
    /**
     * A string value that can be used to classify user types in your directory, such as \'Member\' and \'Guest\'. Returned only on $select. Supports $filter.
     * @type {string}
     * @memberof UserInline
     */
    'userType'?: string;
    /**
     * A freeform text entry field for the user to describe themselves. Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'aboutMe'?: string;
    /**
     * The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select.
     * @type {string}
     * @memberof UserInline
     */
    'birthday'?: string;
    /**
     * 
     * @type {Drive}
     * @memberof UserInline
     */
    'drive'?: Drive;
    /**
     * A collection of drives available for this user. Read-only.
     * @type {Array<Drive>}
     * @memberof UserInline
     */
    'drives'?: Array<Drive>;
}

/**
 * DrivesApi - axios parameter creator
 * @export
 */
export const DrivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new space of a specific type
         * @param {Drive} drive New space property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesCreateDrive: async (drive: Drive, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drive' is not null or undefined
            assertParamExists('drivesCreateDrive', 'drive', drive)
            const localVarPath = `/drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drive, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific space
         * @param {string} driveId key: id of drive
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesDeleteDrive: async (driveId: string, ifMatch?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driveId' is not null or undefined
            assertParamExists('drivesDeleteDrive', 'driveId', driveId)
            const localVarPath = `/drives/{drive-id}`
                .replace(`{${"drive-id"}}`, encodeURIComponent(String(driveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ifMatch !== undefined && ifMatch !== null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get drive by id
         * @param {string} driveId key: id of drive
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesGetDrive: async (driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driveId' is not null or undefined
            assertParamExists('drivesGetDrive', 'driveId', driveId)
            const localVarPath = `/drives/{drive-id}`
                .replace(`{${"drive-id"}}`, encodeURIComponent(String(driveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the space
         * @param {string} driveId key: id of drive
         * @param {Drive} drive New space values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesUpdateDrive: async (driveId: string, drive: Drive, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driveId' is not null or undefined
            assertParamExists('drivesUpdateDrive', 'driveId', driveId)
            // verify required parameter 'drive' is not null or undefined
            assertParamExists('drivesUpdateDrive', 'drive', drive)
            const localVarPath = `/drives/{drive-id}`
                .replace(`{${"drive-id"}}`, encodeURIComponent(String(driveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drive, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrivesApi - functional programming interface
 * @export
 */
export const DrivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrivesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new space of a specific type
         * @param {Drive} drive New space property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drivesCreateDrive(drive: Drive, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.drivesCreateDrive(drive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a specific space
         * @param {string} driveId key: id of drive
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drivesDeleteDrive(driveId: string, ifMatch?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.drivesDeleteDrive(driveId, ifMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get drive by id
         * @param {string} driveId key: id of drive
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drivesGetDrive(driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Drive>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.drivesGetDrive(driveId, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the space
         * @param {string} driveId key: id of drive
         * @param {Drive} drive New space values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drivesUpdateDrive(driveId: string, drive: Drive, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.drivesUpdateDrive(driveId, drive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrivesApi - factory interface
 * @export
 */
export const DrivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrivesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new space of a specific type
         * @param {Drive} drive New space property values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesCreateDrive(drive: Drive, options?: any): AxiosPromise<void> {
            return localVarFp.drivesCreateDrive(drive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific space
         * @param {string} driveId key: id of drive
         * @param {string} [ifMatch] ETag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesDeleteDrive(driveId: string, ifMatch?: string, options?: any): AxiosPromise<void> {
            return localVarFp.drivesDeleteDrive(driveId, ifMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get drive by id
         * @param {string} driveId key: id of drive
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesGetDrive(driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options?: any): AxiosPromise<Drive> {
            return localVarFp.drivesGetDrive(driveId, $select, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the space
         * @param {string} driveId key: id of drive
         * @param {Drive} drive New space values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drivesUpdateDrive(driveId: string, drive: Drive, options?: any): AxiosPromise<void> {
            return localVarFp.drivesUpdateDrive(driveId, drive, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrivesApi - object-oriented interface
 * @export
 * @class DrivesApi
 * @extends {BaseAPI}
 */
export class DrivesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new space of a specific type
     * @param {Drive} drive New space property values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public drivesCreateDrive(drive: Drive, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).drivesCreateDrive(drive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific space
     * @param {string} driveId key: id of drive
     * @param {string} [ifMatch] ETag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public drivesDeleteDrive(driveId: string, ifMatch?: string, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).drivesDeleteDrive(driveId, ifMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get drive by id
     * @param {string} driveId key: id of drive
     * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
     * @param {Set<'*' | 'root'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public drivesGetDrive(driveId: string, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).drivesGetDrive(driveId, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the space
     * @param {string} driveId key: id of drive
     * @param {Drive} drive New space values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrivesApi
     */
    public drivesUpdateDrive(driveId: string, drive: Drive, options?: AxiosRequestConfig) {
        return DrivesApiFp(this.configuration).drivesUpdateDrive(driveId, drive, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDriveApi - axios parameter creator
 * @export
 */
export const MeDriveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get personal space for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDriveGetHome: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDriveApi - functional programming interface
 * @export
 */
export const MeDriveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDriveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get personal space for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meDriveGetHome(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Drive>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meDriveGetHome(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDriveApi - factory interface
 * @export
 */
export const MeDriveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDriveApiFp(configuration)
    return {
        /**
         * 
         * @summary Get personal space for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDriveGetHome(options?: any): AxiosPromise<Drive> {
            return localVarFp.meDriveGetHome(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDriveApi - object-oriented interface
 * @export
 * @class MeDriveApi
 * @extends {BaseAPI}
 */
export class MeDriveApi extends BaseAPI {
    /**
     * 
     * @summary Get personal space for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDriveApi
     */
    public meDriveGetHome(options?: AxiosRequestConfig) {
        return MeDriveApiFp(this.configuration).meDriveGetHome(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDriveRootApi - axios parameter creator
 * @export
 */
export const MeDriveRootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get root from personal space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDriveGetRoot: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drive/root`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDriveRootApi - functional programming interface
 * @export
 */
export const MeDriveRootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDriveRootApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get root from personal space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meDriveGetRoot(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriveItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meDriveGetRoot(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDriveRootApi - factory interface
 * @export
 */
export const MeDriveRootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDriveRootApiFp(configuration)
    return {
        /**
         * 
         * @summary Get root from personal space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDriveGetRoot(options?: any): AxiosPromise<DriveItem> {
            return localVarFp.meDriveGetRoot(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDriveRootApi - object-oriented interface
 * @export
 * @class MeDriveRootApi
 * @extends {BaseAPI}
 */
export class MeDriveRootApi extends BaseAPI {
    /**
     * 
     * @summary Get root from personal space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDriveRootApi
     */
    public meDriveGetRoot(options?: AxiosRequestConfig) {
        return MeDriveRootApiFp(this.configuration).meDriveGetRoot(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDriveRootChildrenApi - axios parameter creator
 * @export
 */
export const MeDriveRootChildrenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get children from drive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDriveRootGetChildren: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drive/root/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDriveRootChildrenApi - functional programming interface
 * @export
 */
export const MeDriveRootChildrenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDriveRootChildrenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get children from drive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meDriveRootGetChildren(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfDriveItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meDriveRootGetChildren(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDriveRootChildrenApi - factory interface
 * @export
 */
export const MeDriveRootChildrenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDriveRootChildrenApiFp(configuration)
    return {
        /**
         * 
         * @summary Get children from drive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDriveRootGetChildren(options?: any): AxiosPromise<CollectionOfDriveItems> {
            return localVarFp.meDriveRootGetChildren(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDriveRootChildrenApi - object-oriented interface
 * @export
 * @class MeDriveRootChildrenApi
 * @extends {BaseAPI}
 */
export class MeDriveRootChildrenApi extends BaseAPI {
    /**
     * 
     * @summary Get children from drive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDriveRootChildrenApi
     */
    public meDriveRootGetChildren(options?: AxiosRequestConfig) {
        return MeDriveRootChildrenApiFp(this.configuration).meDriveRootGetChildren(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeDrivesApi - axios parameter creator
 * @export
 */
export const MeDrivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get drives from me
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meListDrives: async ($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($search !== undefined) {
                localVarQueryParameter['$search'] = $search;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($count !== undefined) {
                localVarQueryParameter['$count'] = $count;
            }

            if ($select) {
                localVarQueryParameter['$select'] = Array.from($select).join(COLLECTION_FORMATS.csv);
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = Array.from($expand).join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeDrivesApi - functional programming interface
 * @export
 */
export const MeDrivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeDrivesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get drives from me
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meListDrives($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionOfDrives>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meListDrives($top, $skip, $search, $filter, $count, $select, $expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeDrivesApi - factory interface
 * @export
 */
export const MeDrivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeDrivesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get drives from me
         * @param {number} [$top] Show only the first n items
         * @param {number} [$skip] Skip the first n items
         * @param {string} [$search] Search items by search phrases
         * @param {string} [$filter] Filter items by property values
         * @param {boolean} [$count] Include count of items
         * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
         * @param {Set<'*' | 'root'>} [$expand] Expand related entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meListDrives($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options?: any): AxiosPromise<CollectionOfDrives> {
            return localVarFp.meListDrives($top, $skip, $search, $filter, $count, $select, $expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeDrivesApi - object-oriented interface
 * @export
 * @class MeDrivesApi
 * @extends {BaseAPI}
 */
export class MeDrivesApi extends BaseAPI {
    /**
     * 
     * @summary Get drives from me
     * @param {number} [$top] Show only the first n items
     * @param {number} [$skip] Skip the first n items
     * @param {string} [$search] Search items by search phrases
     * @param {string} [$filter] Filter items by property values
     * @param {boolean} [$count] Include count of items
     * @param {Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>} [$select] Select properties to be returned
     * @param {Set<'*' | 'root'>} [$expand] Expand related entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeDrivesApi
     */
    public meListDrives($top?: number, $skip?: number, $search?: string, $filter?: string, $count?: boolean, $select?: Set<'id' | 'createdBy' | 'createdDateTime' | 'description' | 'eTag' | 'lastModifiedBy' | 'lastModifiedDateTime' | 'name' | 'parentReference' | 'webUrl' | 'driveType' | 'owner' | 'quota' | 'createdByUser' | 'lastModifiedByUser' | 'root'>, $expand?: Set<'*' | 'root'>, options?: AxiosRequestConfig) {
        return MeDrivesApiFp(this.configuration).meListDrives($top, $skip, $search, $filter, $count, $select, $expand, options).then((request) => request(this.axios, this.basePath));
    }
}


